#include Mouse.h
#include LiquidCrystal_I2C.h Libreria para control de LCD
#include Wire.h           Libreria complemento para control de protocolo i2C
#include String.h         Libreria para manejo de cadena de caracteres
#include Keypad.h   


     byte fila[] = {12, 11, 10, 9};     
     byte columna[] = { 8, 7, 6, 5};     
     
     char teclas [ 4][ 4 ] =
          {
              {'1','2','3','A'},
              {'4','5','6','B'},
              {'7','8','9','C'},
              {'','0','#','D'}
          };
Keypad teclado = Keypad(makeKeymap(teclas), fila, columna, 4, 4);


LiquidCrystal_I2C lcd(0x27,20,4);  LCD
 

 Define Pins

const int startEmulation = 2;       switch to turn on and off mouse emulation
const int mouseLeftButton = 4;     input pin for the mouse left Button
const int mouseRightButton = 3;     input pin for the mouse left Button
const int joystickX = A1;          joystick X axis  
const int joystickY = A0;          joystick Y axis

 parameters for reading the joystick
int cursorSpeed = 10;                output speed of X or Y movement
int responseDelay = 5;         response delay of the mouse, in ms
int threshold = cursorSpeed4;       resting threshold
int center = cursorSpeed2;          resting position value

boolean mouseIsActive = false;     whether or not to control the mouse
int lastSwitchState = LOW;         previous switch state



void setup() {
  Serial.begin(9600);
  pinMode(startEmulation, INPUT_PULLUP);    the switch pin
  pinMode(mouseLeftButton, INPUT_PULLUP);   the left mouse button pin
  pinMode(mouseRightButton, INPUT_PULLUP);   the left mouse button pin  
  Mouse.begin();   take control of the mouse

  LCD
  lcd.init();
  lcd.backlight();
  lcd.setCursor(0, 0);
  lcd.print();
  lcd.setCursor(0, 1);
  lcd.print();
  delay(1000);
  lcd.clear();
}

void loop() 
{

  Teclado 4x4
  char pulsacion = teclado.getKey() ;
  if (pulsacion != 0)           


  LCD
  if(pulsacion =='1')
  {
    lcd.setCursor(0, 0);
    lcd.print(Desarrollo de de recursos educativos de bajo coste);
  }
  if(pulsacion =='2')
  {
    lcd.clear();
  }
  
   read the switch
  int switchState = digitalRead(startEmulation);
  
   if it's changed and it's high, toggle the mouse state
  if (switchState != lastSwitchState) {
    if (switchState == LOW) {
      mouseIsActive = !mouseIsActive;
    }
  }
  
   save switch state for next loop
  lastSwitchState = switchState;

   read and scale the two axes
  int xReading = readAxis(A1);
  int yReading = readAxis(A0);

   if the mouse control state is active, move the mouse
  if (mouseIsActive) {
    Mouse.move(xReading, yReading, 0);  (x, y, scroll mouse wheel)
  }  
     CLICK IZQUIERDO
   read the mouse button and click or not click
   if the mouse button is pressed
  if (digitalRead(mouseLeftButton) == HIGH) {
     if the mouse is not pressed, press it
    if (!Mouse.isPressed(MOUSE_LEFT)) {
      Mouse.press(MOUSE_LEFT);
      delay(100);  delay to enable single and double-click
    }
  }
  
   else the mouse button is not pressed
  else {
     if the mouse is pressed, release it
    if (Mouse.isPressed(MOUSE_LEFT)) {
      Mouse.release(MOUSE_LEFT);
    }
  }
     CLICK DERECHO
   read the mouse button and click or not click
   if the mouse button is pressed
  if (digitalRead(mouseRightButton) == HIGH) {
     if the mouse is not pressed, press it
    if (!Mouse.isPressed(MOUSE_RIGHT)) {
      Mouse.press(MOUSE_RIGHT);
      delay(100);  delay to enable single and double-click
    }
  }
  
   else the mouse button is not pressed
  else {
     if the mouse is pressed, release it
    if (Mouse.isPressed(MOUSE_RIGHT)) {
      Mouse.release(MOUSE_RIGHT);
    }
  }



  delay(responseDelay);
}


  reads an axis (0 or 1 for x or y) and scales the
 analog input range to a range from 0 to 
 

int readAxis(int thisAxis) {
   read the analog input
  int reading = analogRead(thisAxis);

   map the reading from the analog input range to the output range
  reading = map(reading, 0, 1023, 0, cursorSpeed);

   if the output reading is outside from the
   rest position threshold,  use it
  int distance = reading - center;

  if (abs(distance)  threshold) {
    distance = 0;
  }

   return the distance for this axis
  return distance;
}